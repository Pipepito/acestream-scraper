name: Manual Release Pipeline

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      specific_version:
        description: 'Specific version (leave empty for automatic)'
        required: false
        type: string

jobs:
  version:
    name: Determine Version
    runs-on: [self-hosted, unraid, docker]
    outputs:
      new_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: get_version
        run: |
          LATEST_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 1)
          
          if [ ! -z "${{ inputs.specific_version }}" ]; then
            VERSION="${{ inputs.specific_version }}"
          else
            if [ -z "$LATEST_TAG" ]; then
              VERSION="1.0.0"
            else
              CURRENT_VERSION=${LATEST_TAG#v}
              IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
              
              case "${{ inputs.version_type }}" in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                "patch")
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              
              VERSION="${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: v$VERSION"

  # Copy the remaining jobs from release.yml (tag-repository, build-and-push, create-release)
  tag-repository:
    name: Tag Repository
    runs-on: [self-hosted, unraid, docker]
    needs: version
    permissions:
      contents: write
    # ... rest of the job configuration from release.yml

  build-and-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, unraid, docker]
    needs: [version, tag-repository]
    permissions:
      packages: write
    # ... rest of the job configuration from release.yml

  create-release:
    name: Create GitHub Release
    runs-on: [self-hosted, unraid, docker]
    needs: [version, build-and-push]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "v${{ needs.version.outputs.new_version }}"
      
      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 2 | head -n 1)
          echo "tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: "Release v${{ needs.version.outputs.new_version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          previous-tag: ${{ steps.get_previous_tag.outputs.tag }}