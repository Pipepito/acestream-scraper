# .github/workflows/release.yml
name: Release Python Package

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Determine version
        id: get_version
        run: |
          # Get latest version tag
          LATEST_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags found, use default
            VERSION="1.0.0"
          else
            # Extract version number without 'v' prefix
            CURRENT_VERSION=${LATEST_TAG#v}
            
            # Split the version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Increment the patch version
            PATCH=$((PATCH + 1))
            
            # Form the new version
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: v$VERSION"
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools twine
          
      - name: Create package files
        run: |
          # Create source directory
          mkdir -p src/acestream_scraper
          
          # Move app contents to src layout
          if [ -d "app" ]; then
            cp -r app/* src/acestream_scraper/
            rm -rf app
          fi

          # Copy migrations folder to package
          if [ -d "migrations" ]; then
            cp -r migrations src/acestream_scraper/
          fi
          
          # Copy additional files
          cp migrations_app.py manage.py wsgi.py src/acestream_scraper/
          
          # Create pyproject.toml
          cat > pyproject.toml << EOL
          [build-system]
          requires = ["setuptools>=61.0"]
          build-backend = "setuptools.build_meta"

          [project]
          name = "acestream-scraper"
          version = "${VERSION}"
          description = "Acestream channel scraper with ZeroNet support"
          readme = "README.md"
          authors = [{name = "pipepito"}]
          license = {text = "MIT"}
          classifiers = [
              "Programming Language :: Python :: 3",
              "License :: OSI Approved :: MIT License",
              "Operating System :: OS Independent",
          ]
          dependencies = [
              "aiohttp>=3.11.12",
              "asgiref>=3.4.1",
              "beautifulsoup4>=4.9.3",
              "flask[async]>=2.0.1",
              "flask-migrate>=4.0.5",
              "flask-sqlalchemy>=2.5.1",
              "sqlalchemy>=1.4.23",
              "werkzeug>=2.0.3",
          ]

          [project.urls]
          Homepage = "https://github.com/pipepito/acestream-scraper"

          [project.scripts]
          acestream-scraper = "acestream_scraper.__main__:main"

          [tool.setuptools]
          package-dir = {"" = "src"}
          packages = ["acestream_scraper"]
          include-package-data = true
          EOL
          
          # Create __init__.py with version
          echo "__version__ = '$VERSION'" > src/acestream_scraper/__init__.py
          
      - name: Build package
        run: python -m build
      
      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Bump version to v$VERSION [skip ci]" || echo "No changes to commit"
          git push || echo "Failed to push version update"
      
      - name: Tag Repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Update Dockerfile version
        run: |
          # Update the version in Dockerfile
          sed -i "s/version=\".*\"/version=\"$VERSION\"/" Dockerfile
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            pipepito/acestream-scraper:latest
            pipepito/acestream-scraper:v${{ env.VERSION }}
          cache-from: type=registry,ref=pipepito/acestream-scraper:buildcache
          cache-to: type=registry,ref=pipepito/acestream-scraper:buildcache,mode=max
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: "Release v${{ env.VERSION }}"
          files: |
            dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
