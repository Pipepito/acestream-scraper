# .github/workflows/release.yml
name: Release Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'migrations/**'
      - 'Dockerfile'
      - 'entrypoint.sh'
      - 'requirements*.txt'
      - 'wsgi.py'
      - 'run_dev.py'
      - 'manage.py'
      - 'pyproject.toml'
      - 'migrations_app.py'

jobs:
  code-quality:
    name: Lint and Test
    runs-on: [self-hosted, unraid, docker]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install flake8
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run tests
        run: |
          pytest tests/

  version:
    name: Determine Version
    needs: code-quality
    runs-on: [self-hosted, unraid, docker]
    outputs:
      new_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: get_version
        run: |
          # Get latest version tag
          LATEST_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags found, use default
            VERSION="1.0.0"
          else
            # Extract version number without 'v' prefix
            CURRENT_VERSION=${LATEST_TAG#v}
            
            # Split the version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Increment the patch version
            PATCH=$((PATCH + 1))
            
            # Form the new version
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: v$VERSION"

  tag-repository:
    name: Tag Repository
    runs-on: [self-hosted, unraid, docker]
    needs: version
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        
      - name: Update Dockerfile version
        run: |
          # Update the version in Dockerfile
          sed -i "s/version=\".*\"/version=\"${{ needs.version.outputs.new_version }}\"/" Dockerfile
          
      - name: Tag Repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Dockerfile
          git commit -m "Bump version to v${{ needs.version.outputs.new_version }} [skip ci]" || echo "No changes to commit"
          git tag -a "v${{ needs.version.outputs.new_version }}" -m "Release v${{ needs.version.outputs.new_version }}"
          git push origin "v${{ needs.version.outputs.new_version }}"
          git push || echo "Failed to push version update"

  build-and-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, unraid, docker]
    needs: [version, tag-repository]
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "v${{ needs.version.outputs.new_version }}"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            pipepito/acestream-scraper:latest
            pipepito/acestream-scraper:v${{ needs.version.outputs.new_version }}
          no-cache: true
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
          network: host

  create-release:
    name: Create GitHub Release
    runs-on: [self-hosted, unraid, docker]
    needs: [version, build-and-push]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "v${{ needs.version.outputs.new_version }}"
      
      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git tag -l "v*" | grep -v "-" | sort -V | tail -n 2 | head -n 1)
          echo "tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: "Release v${{ needs.version.outputs.new_version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          previous-tag: ${{ steps.get_previous_tag.outputs.tag }}
